<?php

/**
 * @file
 * Drupal Module: NextEuropa Piwik.
 *
 * Adds the required Webtools widget to all your Drupal pages
 * to allow tracking by the Piwik statistics package.
 *
 * @author: Original Piwik module: Alexander Hass <http://drupal.org/user/85918>
 */

use Drupal\nexteuropa_piwik\Entity\PiwikRule;

include_once 'nexteuropa_piwik.admin.inc';
/**
 * Define default path exclusion list to remove tracking from admin pages.
 */
define('NEXTEUROPA_PIWIK_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_help().
 */
function nexteuropa_piwik_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/webtools/piwik_advanced_rules':
      return t('<a href="@pk_url">Europa Analytics</a> is based on an open source (GPL license) web analytics software. It gives interesting reports on your website visitors, your popular pages, the search engine keywords they used, the language they speak... and so much more. Piwik aims to be an open source alternative to Google Analytics.', array('@pk_url' => 'http://www.piwik.org/'));
  }
}

/**
 * Implements hook_theme().
 */
function nexteuropa_piwik_theme() {
  return array(
    'nexteuropa_piwik_admin_custom_var_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function nexteuropa_piwik_permission() {
  return array(
    'administer nexteuropa_piwik' => array(
      'title' => t('Administer Nexteuropa Piwik'),
      'description' => t('Perform maintenance tasks for Piwik.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_js_alter().
 *
 * This adds the webtools smartloader js to the head of normal page.
 */
function nexteuropa_piwik_js_alter(&$javascript) {
  $id = variable_get('nexteuropa_piwik_site_id', '');

  // 1. Check if the piwik account number has a value.
  // 2. Track page views based on visibility and role.
  if (preg_match('/^\d{1,}$/', $id) && _nexteuropa_piwik_visibility_pages()) {
    // Inject the loader if not there.
    _cce_basic_config_webtools_loader_inject($javascript);
  }
}

/**
 * Implements hook_process_html().
 *
 * Add the custom instance variables. That has to be done in the footer region.
 * drupal_add_js won't work as we need application/json.
 */
function nexteuropa_piwik_process_html(&$vars) {
  if (_nexteuropa_piwik_visibility_pages()) {
    $script = _nexteuropa_piwik_generate_json();
    $vars['page_bottom'] .= drupal_render($script);
  }
}

/**
 * Implements hook_process_maintenance_page().
 *
 * Add the custom instance variables.
 */
function nexteuropa_piwik_process_maintenance_page(&$variables) {
  $script = _nexteuropa_piwik_generate_json();
  $variables['scripts'] .= drupal_render($script);
}

/**
 * Helper function to generate the required json.
 */
function _nexteuropa_piwik_generate_json() {
  $id = variable_get('nexteuropa_piwik_site_id', '');
  $instance = variable_get('nexteuropa_piwik_site_instance', '');

  $site_path = variable_get('nexteuropa_piwik_site_path', '');
  $site_section = variable_get('nexteuropa_piwik_site_section', '');

  // Get page status code for visibility filtering.
  $status = drupal_get_http_header('Status');

  // Strip http & https from site_path variable and transforming in to array.
  $site_path = preg_replace('#^https?://#', '', $site_path);
  $site_path = explode(PHP_EOL, $site_path);
  // Create settings array.
  $webtools_piwik_settings = array(
    'utility' => variable_get('nexteuropa_piwik_utility', 'piwik'),
    'siteID' => $id,
    'sitePath' => $site_path,
    'is404' => FALSE,
    'is403' => FALSE,
    'instance' => $instance,
  );

  // Search results pages.
  if (module_exists('search') && variable_get('nexteuropa_piwik_site_search', TRUE) && arg(0) == 'search' && $keys = nexteuropa_piwik_search_get_keys()) {
    global $pager_total_items;
    $results_count = 0;

    if (isset($pager_total_items[0])) {
      $results_count = strval($pager_total_items[0]);
    }

    $webtools_piwik_settings['search']['keyword'] = $keys;
    $webtools_piwik_settings['search']['count'] = $results_count;
  }

  // Track file not found (404) pages.
  if ($status == '404 Not Found') {
    $webtools_piwik_settings['is404'] = TRUE;
  }

  // Track forbidden (403) accesses.
  if ($status == '403 Forbidden') {
    $webtools_piwik_settings['is403'] = TRUE;
  }

  if (!empty($site_section)) {
    $webtools_piwik_settings['siteSection'] = $site_section;
  }

  // Advanced PIWIK rules integration point.
  if (variable_get('nexteuropa_piwik_rules_state', FALSE)) {
    if ($piwik_rule = _nexteuropa_piwik_get_piwik_rule()) {
      $webtools_piwik_settings['siteSection'] = $piwik_rule->rule_section;
    }
  }

  $webtools_piwik_settings = strip_tags(drupal_json_encode($webtools_piwik_settings));
  return array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#attributes' => array(
      'type' => 'application/json',
    ),
    '#weight' => '99999',
    '#value' => $webtools_piwik_settings,
  );
}

/**
 * Return TRUE if widget should be enabled for the current role.
 */
function _nexteuropa_piwik_visibility_roles($account) {
  $visibility = variable_get('nexteuropa_piwik_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('nexteuropa_piwik_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role
        // that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Return TRUE if widget should be enabled for the current page.
 */
function _nexteuropa_piwik_visibility_pages() {
  // Get page status code for visibility filtering.
  $status = drupal_get_http_header('Status');
  if ($status == '404 Not Found') {
    return TRUE;
  }
  global $user;
  // Do not mark as visible if the role should not be tracked.
  if (!_nexteuropa_piwik_visibility_roles($user)) {
    return FALSE;
  }
  static $page_match;
  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('nexteuropa_piwik_visibility_pages', 0);
    $setting_pages = variable_get('nexteuropa_piwik_pages', NEXTEUROPA_PIWIK_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias());
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Helper function for grabbing search keys. Function is missing in D7.
 *
 * Http://api.drupal.org/api/function/search_get_keys/6
 */
function nexteuropa_piwik_search_get_keys() {
  static $return;
  if (!isset($return)) {
    // Extract keys as remainder of path
    // Note: support old GET format of searches for existing links.
    $path = explode('/', $_GET['q'], 3);
    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    $return = count($path) == 3 ? $path[2] : $keys;
  }
  return $return;
}

/**
 * Implements hook_entity_info().
 */
function nexteuropa_piwik_entity_info() {
  if (variable_get('nexteuropa_piwik_rules_state', FALSE)) {
    return array(
      'nexteuropa_piwik_rule' => array(
        'module' => 'nexteuropa_piwik',
        'label' => t('PIWIK rule'),
        'fieldable' => FALSE,
        'entity keys' => array(
          'id' => 'id',
        ),
        'label callback' => 'nexteuropa_piwik_rule_label',
        'base table' => 'nexteuropa_piwik_rule',
        'entity class' => 'Drupal\\nexteuropa_piwik\\Entity\\PiwikRule',
        'controller class' => 'EntityAPIController',
        'access callback' => 'nexteuropa_piwik_rule_access',
        'admin ui' => array(
          'path' => 'admin/config/services/webtools/piwik_advanced_rules',
          'controller class' => 'Drupal\\nexteuropa_piwik\\EntityDefaultUIController\\PiwikRuleEntityUIController',
          'file' => 'nexteuropa_piwik.rule.admin.inc',
        ),
      ),
    );
  }
}

/**
 * Label callback for the Next Europa PIWIK rule entity.
 *
 * @param object $piwik_rule
 *   The Next Europa PIWIK rule.
 *
 * @return null|string
 *   The Next Europa PIWIK rule label.
 */
function nexteuropa_piwik_rule_label($piwik_rule) {
  if (isset($piwik_rule->id)) {
    return t('Rule ID: [!id]',
      array(
        '!id' => $piwik_rule->id,
        '@rule_language' => $piwik_rule->rule_language,
        '@rule_section' => $piwik_rule->rule_section,
      )
    );
  }

  return t('Rule ID: [NEW]');
}

/**
 * Access callback for the  rule entity..
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $nexteuropa_piwik_rule
 *   (optional) A PIWIK rule to check access for. If nothing is given,
 *   access for all cache purge rules is determined.
 * @param object $account
 *   (optional) The user to check for. Leave it to NULL to check for the
 *   global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function nexteuropa_piwik_rule_access($op, $nexteuropa_piwik_rule = NULL, $account = NULL) {
  return user_access('administer nexteuropa_piwik', $account);
}

/**
 * Returns the site section name based on the advanced PIWIK rules.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _nexteuropa_piwik_get_piwik_rule() {
  global $language;
  // Get the current path and convert to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias());
  // Get the current language.
  $lang_code = $language->language;

  // Overwrite path value for the front page.
  if (drupal_is_front_page()) {
    $path = '<front>';
  }

  // Get the advanced PIWIK rule based on the direct path.
  if ($piwik_rule = _nexteuropa_piwik_get_direct_path_rule($path, $lang_code)) {
    return $piwik_rule;
  }

  // Get the advanced PIWIK rule based on the regular expression rule.
  if ($piwik_rule = _nexteuropa_piwik_get_regexp_path_rule($path, $lang_code)) {
    return $piwik_rule;
  }

  return FALSE;
}

/**
 * Returns the PIWIK rule for the direct rule path type.
 *
 * @param string $path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _nexteuropa_piwik_get_direct_path_rule($path, $lang_code) {
  $query = db_query("
      SELECT n.id FROM {nexteuropa_piwik_rule} n
      WHERE n.rule_path = :path
      AND n.rule_path_type = :direct_path
    ",
    array(
      ':path' => $path,
      ':direct_path' => PiwikRule::DIRECT_PATH,
    )
  );
  $results = $query->fetchAllAssoc('id');

  if ($results) {
    return _nexteuropa_piwik_filter_results($results, $path, $lang_code);
  }

  return FALSE;
}

/**
 * Returns the PIWIK rule for the regular expression rule path type.
 *
 * @param string $path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _nexteuropa_piwik_get_regexp_path_rule($path, $lang_code) {
  // The db_query function is used to perform query with the REGEXP comparison
  // option.
  $query = db_query("
      SELECT n.id FROM {nexteuropa_piwik_rule} n
      WHERE n.rule_path_type = :regexp_path
      AND :path REGEXP `rule_path`
    ",
    array(
      ':path' => $path,
      ':regexp_path' => PiwikRule::REGEXP_PATH,
    )
  );
  $results = $query->fetchAllAssoc('id');

  if ($results) {
    return _nexteuropa_piwik_filter_results($results, $path, $lang_code);
  }

  return FALSE;
}

/**
 * Filters results and returns the PIWIK rule.
 *
 * @param array $results
 *   An array with the PIWIK rules IDs.
 * @param string $path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PiwikRule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _nexteuropa_piwik_filter_results($results, $path, $lang_code) {
  // Return PIWIK rule.
  $lang_code_rules = array();
  $lang_all_rules = array();
  $piwik_rules = entity_load('nexteuropa_piwik_rule', array_keys($results));
  foreach ($piwik_rules as $piwik_rule) {
    if ($lang_code === $piwik_rule->rule_language) {
      $lang_code_rules[$piwik_rule->id] = $piwik_rule;
    }

    if ($piwik_rule->rule_language === 'all') {
      $lang_all_rules[$piwik_rule->id] = $piwik_rule;
    }
  }
  // Return latest rule for the defined language.
  if (!empty($lang_code_rules)) {
    return _nexteuropa_piwik_get_latest_rule($lang_code_rules);
  }

  // Return latest rule defined for all languages.
  if (!empty($lang_all_rules)) {
    return _nexteuropa_piwik_get_latest_rule($lang_all_rules);
  }

  return FALSE;
}

/**
 * Returns the latest rule object from the array.
 *
 * @param array $rules_array
 *   An array with the PiwikRule objects keyed by the id.
 *
 * @return \Drupal\nexteuropa_piwik\Entity\PiwikRule
 *   PiwikRule entity.
 */
function _nexteuropa_piwik_get_latest_rule($rules_array) {
  ksort($rules_array, SORT_DESC);
  return array_pop($rules_array);
}
